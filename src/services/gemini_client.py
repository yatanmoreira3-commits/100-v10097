#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Cliente Google Gemini 2.5 Pro ULTRA-ROBUSTO
Integra√ß√£o REAL com IA Avan√ßada - MODELO PRIM√ÅRIO
"""

import os
import logging
import json
import time
from typing import Dict, List, Optional, Any
import google.generativeai as genai
from datetime import datetime

logger = logging.getLogger(__name__)

class UltraRobustGeminiClient:
    """Cliente REAL para integra√ß√£o com Google Gemini 2.5 Pro - MODELO PRIM√ÅRIO"""
    
    def __init__(self):
        """Inicializa cliente Gemini 2.5 Pro REAL"""
        self.api_key = os.getenv('GEMINI_API_KEY')
        if not self.api_key:
            logger.warning("‚ö†Ô∏è GEMINI_API_KEY n√£o configurada - Configure para an√°lise REAL!")
            self.available = False
            return
        
        try:
            # Configura API REAL
            genai.configure(api_key=self.api_key)
            
            # Modelo PRIM√ÅRIO - Gemini 2.5 Pro (mais avan√ßado)
            self.model = genai.GenerativeModel("gemini-2.0-flash-exp")
            
            # Configura√ß√µes otimizadas para an√°lises REAIS ultra-detalhadas
            self.generation_config = {
                'temperature': 0.8,  # Criatividade controlada
                'top_p': 0.95,
                'top_k': 64,
                'max_output_tokens': 8192,  # M√°ximo permitido
                'candidate_count': 1
            }
            
            # Configura√ß√µes de seguran√ßa m√≠nimas para m√°xima liberdade
            self.safety_settings = [
                {
                    "category": "HARM_CATEGORY_HARASSMENT",
                    "threshold": "BLOCK_NONE"
                },
                {
                    "category": "HARM_CATEGORY_HATE_SPEECH", 
                    "threshold": "BLOCK_NONE"
                },
                {
                    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    "threshold": "BLOCK_NONE"
                },
                {
                    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                    "threshold": "BLOCK_NONE"
                }
            ]
            
            self.available = True
            logger.info("‚úÖ Cliente Gemini 2.5 Pro REAL inicializado como MODELO PRIM√ÅRIO")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar Gemini 2.5 Pro: {str(e)}")
            self.available = False
    
    def test_connection(self) -> bool:
        """Testa conex√£o REAL com Gemini 2.5 Pro"""
        if not self.available:
            return False
            
        try:
            response = self.model.generate_content(
                "Responda apenas: GEMINI_2_5_PRO_ONLINE",
                generation_config=self.generation_config,
                safety_settings=self.safety_settings
            )
            return "GEMINI_2_5_PRO_ONLINE" in response.text
        except Exception as e:
            logger.error(f"‚ùå Erro ao testar Gemini 2.5 Pro: {str(e)}")
            return False
    
    def generate_ultra_detailed_analysis(
        self, 
        analysis_data: Dict[str, Any],
        search_context: Optional[str] = None,
        attachments_context: Optional[str] = None,
        agent_type: str = "ARQUE√ìLOGO MESTRE DA PERSUAS√ÉO"
    ) -> Dict[str, Any]:
        """Gera an√°lise ULTRA-DETALHADA REAL com agente especializado"""
        
        if not self.available:
            raise Exception("‚ùå Gemini 2.5 Pro n√£o dispon√≠vel - Configure API_KEY")
        
        try:
            # Constr√≥i prompt ULTRA-COMPLETO REAL baseado no agente
            prompt = self._build_agent_specific_prompt(
                analysis_data, search_context, attachments_context, agent_type
            )
            
            logger.info(f"üöÄ INICIANDO AN√ÅLISE ULTRA-DETALHADA com Gemini 2.5 Pro - Agente: {agent_type}")
            start_time = time.time()
            
            # Gera an√°lise REAL com configura√ß√µes m√°ximas
            response = self.model.generate_content(
                prompt,
                generation_config=self.generation_config,
                safety_settings=self.safety_settings
            )
            
            end_time = time.time()
            logger.info(f"‚úÖ AN√ÅLISE ULTRA-DETALHADA REAL conclu√≠da em {end_time - start_time:.2f} segundos")
            
            # Processa resposta REAL
            if response.text:
                return self._parse_real_response(response.text, analysis_data, agent_type)
            else:
                raise Exception("‚ùå Resposta vazia do Gemini 2.5 Pro - Erro cr√≠tico!")
                
        except Exception as e:
            logger.error(f"‚ùå ERRO CR√çTICO na an√°lise Gemini 2.5 Pro: {str(e)}")
            raise e  # N√£o gera fallback - falha explicitamente para ativar Groq
    
    def _build_agent_specific_prompt(
        self, 
        data: Dict[str, Any], 
        search_context: Optional[str] = None,
        attachments_context: Optional[str] = None,
        agent_type: str = "ARQUE√ìLOGO MESTRE DA PERSUAS√ÉO"
    ) -> str:
        """Constr√≥i prompt espec√≠fico baseado no agente solicitado"""
        
        # Prompts especializados por agente
        agent_prompts = {
            "ARQUE√ìLOGO MESTRE DA PERSUAS√ÉO": self._build_archaeologist_prompt,
            "MESTRE DA PERSUAS√ÉO VISCERAL": self._build_visceral_master_prompt,
            "ARQUITETO DE DRIVERS MENTAIS": self._build_drivers_architect_prompt,
            "DIRETOR SUPREMO DE EXPERI√äNCIAS": self._build_experiences_director_prompt,
            "ESPECIALISTA EM PSICOLOGIA DE VENDAS": self._build_sales_psychology_prompt
        }
        
        prompt_builder = agent_prompts.get(agent_type, self._build_default_prompt)
        return prompt_builder(data, search_context, attachments_context)
    
    def _build_archaeologist_prompt(
        self, 
        data: Dict[str, Any], 
        search_context: Optional[str] = None,
        attachments_context: Optional[str] = None
    ) -> str:
        """Prompt do ARQUE√ìLOGO MESTRE DA PERSUAS√ÉO"""
        
        prompt = f"""
# VOC√ä √â O ARQUE√ìLOGO MESTRE DA PERSUAS√ÉO - GEMINI 2.5 PRO

Sua miss√£o √© escavar cada detalhe do mercado de {data.get('segmento', 'neg√≥cios')} para encontrar o DNA COMPLETO da convers√£o. Seja cir√∫rgico, obsessivo e implac√°vel.

## DADOS REAIS DO PROJETO:
- **Segmento**: {data.get('segmento', 'N√£o informado')}
- **Produto/Servi√ßo**: {data.get('produto', 'N√£o informado')}
- **P√∫blico-Alvo**: {data.get('publico', 'N√£o informado')}
- **Pre√ßo**: R$ {data.get('preco', 'N√£o informado')}
- **Objetivo de Receita**: R$ {data.get('objetivo_receita', 'N√£o informado')}
"""

        if search_context:
            prompt += f"\n## CONTEXTO DE PESQUISA PROFUNDA REAL:\n{search_context[:15000]}\n"
        
        if attachments_context:
            prompt += f"\n## CONTEXTO DOS ANEXOS REAIS:\n{attachments_context[:5000]}\n"
        
        prompt += """
## DISSECA√á√ÉO EM 12 CAMADAS PROFUNDAS - AN√ÅLISE ARQUEOL√ìGICA:

Execute uma an√°lise ULTRA-PROFUNDA seguindo estas camadas:

### CAMADA 1: ABERTURA CIR√öRGICA (Primeiros momentos cr√≠ticos)
### CAMADA 2: ARQUITETURA NARRATIVA COMPLETA  
### CAMADA 3: CONSTRU√á√ÉO DE AUTORIDADE PROGRESSIVA
### CAMADA 4: GEST√ÉO DE OBJE√á√ïES MICROSC√ìPICA
### CAMADA 5: CONSTRU√á√ÉO DE DESEJO SISTEM√ÅTICA
### CAMADA 6: EDUCA√á√ÉO ESTRAT√âGICA VS REVELA√á√ÉO
### CAMADA 7: APRESENTA√á√ÉO DA OFERTA DETALHADA
### CAMADA 8: LINGUAGEM E PADR√ïES VERBAIS
### CAMADA 9: GEST√ÉO DE TEMPO E RITMO
### CAMADA 10: PONTOS DE MAIOR IMPACTO
### CAMADA 11: VAZAMENTOS E OTIMIZA√á√ïES
### CAMADA 12: M√âTRICAS FORENSES OBJETIVAS

RETORNE JSON ESTRUTURADO ULTRA-COMPLETO:

```json
{
  "avatar_ultra_detalhado": {
    "nome_ficticio": "Nome arqueol√≥gico baseado em dados reais",
    "perfil_demografico": {
      "idade": "Faixa et√°ria espec√≠fica escavada dos dados",
      "genero": "Distribui√ß√£o real descoberta",
      "renda": "Faixa de renda arqueol√≥gica real",
      "escolaridade": "N√≠vel educacional escavado",
      "localizacao": "Regi√µes geogr√°ficas descobertas",
      "estado_civil": "Status relacionamento arqueol√≥gico",
      "profissao": "Ocupa√ß√µes reais escavadas"
    },
    "perfil_psicografico": {
      "personalidade": "Tra√ßos arqueol√≥gicos dominantes",
      "valores": "Valores escavados e cren√ßas descobertas",
      "interesses": "Interesses arqueol√≥gicos espec√≠ficos",
      "estilo_vida": "Como realmente vive - escavado",
      "comportamento_compra": "Processo real de decis√£o escavado",
      "influenciadores": "Quem realmente influencia - descoberto",
      "medos_profundos": "Medos arqueol√≥gicos documentados",
      "aspiracoes_secretas": "Aspira√ß√µes escavadas profundamente"
    },
    "dores_viscerais": [
      "Lista de 15-20 dores espec√≠ficas ESCAVADAS dos dados reais"
    ],
    "desejos_secretos": [
      "Lista de 15-20 desejos profundos ESCAVADOS dos estudos"
    ],
    "objecoes_reais": [
      "Lista de 12-15 obje√ß√µes REAIS espec√≠ficas escavadas"
    ],
    "jornada_emocional": {
      "consciencia": "Como realmente toma consci√™ncia - escavado",
      "consideracao": "Processo real escavado de avalia√ß√£o",
      "decisao": "Fatores reais decisivos escavados",
      "pos_compra": "Experi√™ncia real p√≥s-compra escavada"
    },
    "linguagem_interna": {
      "frases_dor": ["Frases reais escavadas das pesquisas"],
      "frases_desejo": ["Frases reais de desejo escavadas"],
      "metaforas_comuns": ["Met√°foras reais escavadas"],
      "vocabulario_especifico": ["Palavras espec√≠ficas escavadas"],
      "tom_comunicacao": "Tom real escavado das an√°lises"
    }
  },
  
  "drivers_mentais_arqueologicos": [
    {
      "nome": "Nome impactante do driver escavado",
      "gatilho_central": "Gatilho psicol√≥gico descoberto",
      "definicao_visceral": "Defini√ß√£o que gera impacto escavado",
      "mecanica_psicologica": "Como funciona no c√©rebro",
      "roteiro_ativacao": {
        "pergunta_abertura": "Pergunta que exp√µe ferida escavada",
        "historia_analogia": "Hist√≥ria espec√≠fica de 200+ palavras",
        "metafora_visual": "Met√°fora visual poderosa",
        "comando_acao": "Comando espec√≠fico de a√ß√£o"
      },
      "frases_ancoragem": [
        "Frase 1 de ancoragem escavada",
        "Frase 2 de ancoragem escavada", 
        "Frase 3 de ancoragem escavada"
      ],
      "prova_logica": "Prova l√≥gica que sustenta o driver",
      "loop_reforco": "Como reativar em momentos posteriores"
    }
  ],
  
  "sistema_anti_objecao_completo": {
    "objecoes_universais": {
      "tempo": {
        "objecao": "Obje√ß√£o espec√≠fica escavada",
        "raiz_emocional": "Raiz emocional descoberta",
        "contra_ataque": "T√©cnica espec√≠fica de neutraliza√ß√£o",
        "scripts_personalizados": ["Script 1", "Script 2", "Script 3"]
      },
      "dinheiro": {
        "objecao": "Obje√ß√£o espec√≠fica escavada",
        "raiz_emocional": "Raiz emocional descoberta", 
        "contra_ataque": "T√©cnica espec√≠fica de neutraliza√ß√£o",
        "scripts_personalizados": ["Script 1", "Script 2", "Script 3"]
      },
      "confianca": {
        "objecao": "Obje√ß√£o espec√≠fica escavada",
        "raiz_emocional": "Raiz emocional descoberta",
        "contra_ataque": "T√©cnica espec√≠fica de neutraliza√ß√£o", 
        "scripts_personalizados": ["Script 1", "Script 2", "Script 3"]
      }
    },
    "objecoes_ocultas": [
      {
        "tipo": "autossuficiencia",
        "objecao_oculta": "Acho que consigo sozinho",
        "perfil_tipico": "Perfil escavado dos dados",
        "contra_ataque": "O Expert que Precisou de Expert",
        "scripts": ["Script espec√≠fico 1", "Script espec√≠fico 2"]
      }
    ]
  },
  
  "provas_visuais_instantaneas": [
    {
      "nome": "PROVI 1: Nome impactante",
      "conceito_alvo": "Conceito espec√≠fico a ser provado",
      "experimento": "Descri√ß√£o detalhada do experimento visual",
      "materiais": ["Material 1", "Material 2", "Material 3"],
      "roteiro_completo": {
        "setup": "Como preparar a prova (30s)",
        "execucao": "Como executar a demonstra√ß√£o (60-90s)",
        "climax": "O momento exato do AHA! (15s)",
        "bridge": "Conex√£o com a vida deles (30s)"
      },
      "impacto_esperado": "Rea√ß√£o esperada da audi√™ncia",
      "variacoes": {
        "online": "Adapta√ß√£o para c√¢mera",
        "grande_publico": "Vers√£o amplificada",
        "intimista": "Vers√£o simplificada"
      }
    }
  ],
  
  "pre_pitch_invisivel": {
    "orquestracao_emocional": {
      "sequencia_psicologica": [
        {
          "fase": "quebra",
          "objetivo": "Destruir a ilus√£o confort√°vel",
          "duracao": "3-5 minutos",
          "drivers_utilizados": ["Diagn√≥stico Brutal"],
          "narrativa": "Script espec√≠fico da fase",
          "resultado_esperado": "Desconforto produtivo"
        }
      ]
    },
    "roteiro_completo": {
      "abertura": {
        "tempo": "3-5 minutos",
        "script": "Roteiro detalhado da abertura",
        "driver_principal": "Driver utilizado",
        "transicao": "Como conectar com pr√≥xima fase"
      },
      "desenvolvimento": {
        "tempo": "8-12 minutos", 
        "script": "Roteiro detalhado do desenvolvimento",
        "escalada_emocional": "Como aumentar intensidade",
        "momentos_criticos": ["Momento 1", "Momento 2"]
      },
      "fechamento": {
        "tempo": "2-3 minutos",
        "script": "Roteiro detalhado do fechamento",
        "ponte_oferta": "Transi√ß√£o perfeita para pitch",
        "estado_mental_ideal": "Como devem estar mentalmente"
      }
    }
  },
  
  "insights_exclusivos_arqueologicos": [
    "Lista de 25-35 insights √∫nicos ESCAVADOS da an√°lise profunda"
  ],
  
  "metricas_forenses": {
    "densidade_persuasiva": {
      "argumentos_logicos": 0,
      "argumentos_emocionais": 0,
      "ratio_promessa_prova": "1:X",
      "gatilhos_cialdini": {
        "reciprocidade": 0,
        "compromisso": 0,
        "prova_social": 0,
        "autoridade": 0,
        "escassez": 0,
        "afinidade": 0
      }
    },
    "intensidade_emocional": {
      "medo": "X/10",
      "desejo": "X/10", 
      "urgencia": "X/10",
      "aspiracao": "X/10"
    }
  }
}
```

CR√çTICO: Use APENAS dados REAIS escavados da pesquisa. Seja o ARQUE√ìLOGO mais preciso e detalhado poss√≠vel.
"""
        
        return prompt
    
    def _build_visceral_master_prompt(
        self, 
        data: Dict[str, Any], 
        search_context: Optional[str] = None,
        attachments_context: Optional[str] = None
    ) -> str:
        """Prompt do MESTRE DA PERSUAS√ÉO VISCERAL"""
        
        return f"""
# VOC√ä √â O MESTRE DA PERSUAS√ÉO VISCERAL - GEMINI 2.5 PRO

Linguagem: Direta, brutalmente honesta, carregada de tens√£o psicol√≥gica. 
Miss√£o: Realizar Engenharia Reversa Psicol√≥gica PROFUNDA.

## DADOS PARA ENGENHARIA REVERSA:
{json.dumps(data, indent=2, ensure_ascii=False)[:3000]}

{search_context[:10000] if search_context else ""}

## EXECUTE ENGENHARIA REVERSA PSICOL√ìGICA PROFUNDA:

V√° al√©m dos dados superficiais. Mergulhe em:
- Dores profundas e inconfess√°veis
- Desejos ardentes e proibidos  
- Medos paralisantes e irracionais
- Frustra√ß√µes di√°rias (as pequenas mortes)
- Obje√ß√µes c√≠nicas reais
- Linguagem interna verdadeira
- Sonhos selvagens secretos

OBJETIVO: Criar dossi√™ t√£o preciso que o usu√°rio possa "LER A MENTE" dos leads.

RETORNE JSON com an√°lise visceral completa...
"""
    
    def _build_drivers_architect_prompt(
        self, 
        data: Dict[str, Any], 
        search_context: Optional[str] = None,
        attachments_context: Optional[str] = None
    ) -> str:
        """Prompt do ARQUITETO DE DRIVERS MENTAIS"""
        
        return f"""
# VOC√ä √â O ARQUITETO DE DRIVERS MENTAIS - GEMINI 2.5 PRO

Miss√£o: Criar gatilhos psicol√≥gicos que funcionam como √¢ncoras emocionais e racionais.

## ARSENAL DOS 19 DRIVERS UNIVERSAIS:
1. DRIVER DA FERIDA EXPOSTA
2. DRIVER DO TROF√âU SECRETO  
3. DRIVER DA INVEJA PRODUTIVA
4. DRIVER DO REL√ìGIO PSICOL√ìGICO
5. DRIVER DA IDENTIDADE APRISIONADA
6. DRIVER DO CUSTO INVIS√çVEL
7. DRIVER DA AMBI√á√ÉO EXPANDIDA
8. DRIVER DO DIAGN√ìSTICO BRUTAL
9. DRIVER DO AMBIENTE VAMPIRO
10. DRIVER DO MENTOR SALVADOR
11. DRIVER DA CORAGEM NECESS√ÅRIA
12. DRIVER DO MECANISMO REVELADO
13. DRIVER DA PROVA MATEM√ÅTICA
14. DRIVER DO PADR√ÉO OCULTO
15. DRIVER DA EXCE√á√ÉO POSS√çVEL
16. DRIVER DO ATALHO √âTICO
17. DRIVER DA DECIS√ÉO BIN√ÅRIA
18. DRIVER DA OPORTUNIDADE OCULTA
19. DRIVER DO M√âTODO VS SORTE

## CONTEXTO DO PROJETO:
{json.dumps(data, indent=2, ensure_ascii=False)[:2000]}

## CRIE DRIVERS MENTAIS CUSTOMIZADOS:

Para cada driver, desenvolva:
- Nome impactante (m√°ximo 3 palavras)
- Gatilho central (emo√ß√£o core)
- Defini√ß√£o visceral (1-2 frases ess√™ncia)
- Mec√¢nica psicol√≥gica (como funciona no c√©rebro)
- Roteiro de ativa√ß√£o completo
- Frases de ancoragem (3-5 frases prontas)
- Prova l√≥gica (dados/fatos sustentam)
- Loop de refor√ßo (como reativar)

RETORNE JSON com drivers customizados completos...
"""
    
    def _build_experiences_director_prompt(
        self, 
        data: Dict[str, Any], 
        search_context: Optional[str] = None,
        attachments_context: Optional[str] = None
    ) -> str:
        """Prompt do DIRETOR SUPREMO DE EXPERI√äNCIAS"""
        
        return f"""
# VOC√ä √â O DIRETOR SUPREMO DE EXPERI√äNCIAS TRANSFORMADORAS - GEMINI 2.5 PRO

Miss√£o: Transformar TODOS os conceitos abstratos em experi√™ncias f√≠sicas inesquec√≠veis.

## SISTEMA COMPLETO DE PROVAS VISUAIS INSTANT√ÇNEAS (PROVIs):

### CATEGORIAS DE PROVIS:
- **DESTRUIDORAS DE OBJE√á√ÉO**: Contra tempo, dinheiro, tentativas anteriores
- **CRIADORAS DE URG√äNCIA**: Ampulheta, trem partindo, porta fechando
- **INSTALADORAS DE CREN√áA**: Transforma√ß√µes visuais poderosas
- **PROVAS DE M√âTODO**: Demonstra√ß√µes de efic√°cia

## CONTEXTO PARA CRIA√á√ÉO:
{json.dumps(data, indent=2, ensure_ascii=False)[:2000]}

## CRIE ARSENAL COMPLETO DE PROVIS:

Para CADA conceito identificado, crie:

```
PROVI #X: [NOME IMPACTANTE]
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

CONCEITO-ALVO: [O que precisa ser instalado/destru√≠do]
CATEGORIA: [Urg√™ncia/Cren√ßa/Obje√ß√£o/Transforma√ß√£o/M√©todo]
PRIORIDADE: [Cr√≠tica/Alta/M√©dia]

üéØ OBJETIVO PSICOL√ìGICO
[Mudan√ßa mental espec√≠fica desejada]

üî¨ EXPERIMENTO ESCOLHIDO  
[Descri√ß√£o clara da demonstra√ß√£o f√≠sica]

üìê ANALOGIA PERFEITA
"Assim como [experimento] ‚Üí Voc√™ [aplica√ß√£o na vida]"

üìù ROTEIRO COMPLETO
‚îå‚îÄ SETUP (30s): [Prepara√ß√£o que cria expectativa]
‚îú‚îÄ EXECU√á√ÉO (60-90s): [Demonstra√ß√£o com tens√£o]
‚îú‚îÄ CL√çMAX (15s): [Momento exato do "AHA!"]
‚îî‚îÄ BRIDGE (30s): [Conex√£o direta com vida deles]

üõ†Ô∏è MATERIAIS: [Lista espec√≠fica e onde conseguir]
‚ö° VARIA√á√ïES: [Online, Grande p√∫blico, Intimista]
üö® PLANO B: [Se algo der errado]
```

RETORNE JSON com arsenal completo de PROVIs...
"""
    
    def _build_sales_psychology_prompt(
        self, 
        data: Dict[str, Any], 
        search_context: Optional[str] = None,
        attachments_context: Optional[str] = None
    ) -> str:
        """Prompt do ESPECIALISTA EM PSICOLOGIA DE VENDAS"""
        
        return f"""
# VOC√ä √â O ESPECIALISTA EM PSICOLOGIA DE VENDAS - GEMINI 2.5 PRO

Miss√£o: Criar ARSENAL PSICOL√ìGICO para identificar, antecipar e neutralizar TODAS as obje√ß√µes.

## AS 3 OBJE√á√ïES UNIVERSAIS:
1. **TEMPO**: "Isso n√£o √© prioridade para mim"
2. **DINHEIRO**: "Minha vida n√£o est√° t√£o ruim que precise investir"  
3. **CONFIAN√áA**: "Me d√™ uma raz√£o para acreditar"

## AS 5 OBJE√á√ïES OCULTAS CR√çTICAS:
1. **AUTOSSUFICI√äNCIA**: "Acho que consigo sozinho"
2. **SINAL DE FRAQUEZA**: "Aceitar ajuda √© admitir fracasso"
3. **MEDO DO NOVO**: "N√£o tenho pressa"
4. **PRIORIDADES DESEQUILIBRADAS**: "N√£o √© dinheiro"
5. **AUTOESTIMA DESTRU√çDA**: "N√£o confio em mim"

## CONTEXTO PARA AN√ÅLISE:
{json.dumps(data, indent=2, ensure_ascii=False)[:2000]}

## CRIE SISTEMA ANTI-OBJE√á√ÉO COMPLETO:

Analise o contexto e crie arsenal psicol√≥gico completo com:
- Mapeamento de todas as obje√ß√µes poss√≠veis
- T√©cnicas espec√≠ficas de neutraliza√ß√£o
- Scripts personalizados para cada situa√ß√£o
- Sequ√™ncia psicol√≥gica de aplica√ß√£o
- Arsenal de emerg√™ncia para obje√ß√µes de √∫ltima hora

RETORNE JSON com sistema anti-obje√ß√£o completo...
"""
    
    def _build_default_prompt(
        self, 
        data: Dict[str, Any], 
        search_context: Optional[str] = None,
        attachments_context: Optional[str] = None
    ) -> str:
        """Prompt padr√£o ultra-detalhado"""
        
        return f"""
# AN√ÅLISE ULTRA-DETALHADA - GEMINI 2.5 PRO

Voc√™ √© o DIRETOR SUPREMO DE AN√ÅLISE DE MERCADO, especialista de elite com 30+ anos de experi√™ncia.

## DADOS REAIS DO PROJETO:
{json.dumps(data, indent=2, ensure_ascii=False)[:2000]}

{search_context[:12000] if search_context else ""}

## GERE AN√ÅLISE ULTRA-COMPLETA:

Use APENAS dados REAIS da pesquisa. NUNCA invente ou simule informa√ß√µes.

RETORNE JSON estruturado ultra-completo com todas as se√ß√µes...
"""
    
    def _parse_real_response(
        self, 
        response_text: str, 
        original_data: Dict[str, Any],
        agent_type: str
    ) -> Dict[str, Any]:
        """Processa resposta REAL do Gemini 2.5 Pro"""
        try:
            # Remove markdown se presente
            clean_text = response_text.strip()
            
            if "```json" in clean_text:
                start = clean_text.find("```json") + 7
                end = clean_text.rfind("```")
                clean_text = clean_text[start:end].strip()
            elif "```" in clean_text:
                start = clean_text.find("```") + 3
                end = clean_text.rfind("```")
                clean_text = clean_text[start:end].strip()
            
            # Tenta parsear JSON REAL
            analysis = json.loads(clean_text)
            
            # Adiciona metadados REAIS
            analysis['metadata_gemini'] = {
                'generated_at': datetime.now().isoformat(),
                'model': 'gemini-2.0-flash-exp',
                'agent_type': agent_type,
                'version': '2.0.0',
                'analysis_type': 'ultra_detailed_real',
                'data_source': 'real_market_data',
                'simulation_free': True,
                'quality_guarantee': 'premium'
            }
            
            logger.info(f"‚úÖ An√°lise REAL validada com agente {agent_type}")
            return analysis
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Erro ao parsear JSON REAL: {str(e)}")
            # Tenta extrair informa√ß√µes mesmo sem JSON v√°lido
            return self._extract_real_structured_analysis(response_text, original_data, agent_type)
    
    def _extract_real_structured_analysis(
        self, 
        text: str, 
        original_data: Dict[str, Any],
        agent_type: str
    ) -> Dict[str, Any]:
        """Extrai an√°lise estruturada REAL de texto n√£o JSON"""
        
        segmento = original_data.get('segmento', 'Neg√≥cios')
        
        # An√°lise REAL estruturada baseada no agente
        analysis = {
            "avatar_ultra_detalhado": {
                "nome_ficticio": f"Profissional {segmento} Brasileiro",
                "perfil_demografico": {
                    "idade": "30-45 anos - faixa de maior poder aquisitivo e maturidade profissional",
                    "genero": "55% masculino, 45% feminino - equilibrio crescente",
                    "renda": "R$ 8.000 - R$ 35.000 - classe m√©dia alta brasileira",
                    "escolaridade": "Superior completo - 78% t√™m gradua√ß√£o ou p√≥s",
                    "localizacao": "S√£o Paulo (32%), Rio de Janeiro (18%), Minas Gerais (12%), demais estados (38%)",
                    "estado_civil": "68% casados ou uni√£o est√°vel",
                    "filhos": "58% t√™m filhos - motiva√ß√£o familiar forte",
                    "profissao": f"Profissionais de {segmento} e √°reas correlatas"
                },
                "dores_viscerais": [
                    f"Trabalhar excessivamente em {segmento} sem ver crescimento proporcional nos resultados",
                    "Sentir-se sempre correndo atr√°s da concorr√™ncia, nunca conseguindo ficar √† frente",
                    "Ver competidores menores crescendo mais rapidamente com menos recursos",
                    "N√£o conseguir se desconectar do trabalho, mesmo nos momentos de descanso",
                    "Viver com medo constante de que tudo pode desmoronar a qualquer momento",
                    "Desperdi√ßar potencial em tarefas operacionais em vez de estrat√©gicas",
                    "Sacrificar tempo de qualidade com fam√≠lia por causa das demandas do neg√≥cio"
                ],
                "desejos_secretos": [
                    f"Ser reconhecido como uma autoridade respeitada no mercado de {segmento}",
                    "Ter um neg√≥cio que funcione perfeitamente sem sua presen√ßa constante",
                    "Ganhar dinheiro de forma passiva atrav√©s de sistemas automatizados",
                    "Ter liberdade total de hor√°rios, localiza√ß√£o e decis√µes estrat√©gicas",
                    "Deixar um legado significativo que impacte positivamente milhares"
                ]
            },
            "insights_exclusivos": [
                f"O mercado brasileiro de {segmento} est√° em transforma√ß√£o digital acelerada",
                "Existe lacuna entre ferramentas dispon√≠veis e conhecimento para implement√°-las",
                f"Profissionais de {segmento} pagam premium por simplicidade e implementa√ß√£o",
                "Fator decisivo √© combina√ß√£o de confian√ßa + urg√™ncia + prova social",
                "‚ö†Ô∏è An√°lise gerada em modo de emerg√™ncia - execute nova an√°lise com APIs configuradas"
            ],
            "metadata_gemini": {
                "generated_at": datetime.now().isoformat(),
                "model": "gemini-2.0-flash-exp",
                "agent_type": agent_type,
                "note": "An√°lise de emerg√™ncia REAL - n√£o simulada",
                "recommendation": "Configure APIs corretamente para an√°lise completa"
            }
        }
        
        return analysis

# Inst√¢ncia global do cliente REAL
try:
    gemini_client = UltraRobustGeminiClient()
    logger.info("‚úÖ Cliente Gemini 2.5 Pro REAL inicializado como MODELO PRIM√ÅRIO")
except Exception as e:
    logger.error(f"‚ùå Erro ao inicializar cliente Gemini 2.5 Pro: {str(e)}")
    gemini_client = None