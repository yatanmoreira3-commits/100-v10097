#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Pre-Pitch Architect Advanced
MESTRE DO PR√â-PITCH INVIS√çVEL - Orquestra√ß√£o de Tens√£o Psicol√≥gica
"""

import logging
import time
import json
from typing import Dict, List, Any, Optional
from datetime import datetime
from services.ai_manager import ai_manager
from services.auto_save_manager import salvar_etapa, salvar_erro

logger = logging.getLogger(__name__)

class PrePitchArchitectAdvanced:
    """MESTRE DO PR√â-PITCH INVIS√çVEL - Sinfonia de Tens√£o Psicol√≥gica"""
    
    def __init__(self):
        """Inicializa o arquiteto avan√ßado de pr√©-pitch"""
        self.psychological_phases = {
            'quebra': {
                'objetivo': 'Destruir a ilus√£o confort√°vel',
                'duracao': '3-5 minutos',
                'intensidade': 'Alta',
                'resultado_esperado': 'Desconforto produtivo'
            },
            'exposicao': {
                'objetivo': 'Revelar a ferida real',
                'duracao': '4-6 minutos',
                'intensidade': 'Crescente',
                'resultado_esperado': 'Consci√™ncia da dor'
            },
            'indignacao': {
                'objetivo': 'Criar revolta produtiva',
                'duracao': '3-4 minutos',
                'intensidade': 'M√°xima',
                'resultado_esperado': 'Urg√™ncia de mudan√ßa'
            },
            'vislumbre': {
                'objetivo': 'Mostrar o poss√≠vel',
                'duracao': '5-7 minutos',
                'intensidade': 'Esperan√ßosa',
                'resultado_esperado': 'Desejo amplificado'
            },
            'tensao': {
                'objetivo': 'Amplificar o gap',
                'duracao': '2-3 minutos',
                'intensidade': 'Crescente',
                'resultado_esperado': 'Tens√£o m√°xima'
            },
            'necessidade': {
                'objetivo': 'Tornar a mudan√ßa inevit√°vel',
                'duracao': '3-4 minutos',
                'intensidade': 'Definitiva',
                'resultado_esperado': 'Necessidade de solu√ß√£o'
            }
        }
        
        logger.info("üéØ MESTRE DO PR√â-PITCH INVIS√çVEL inicializado")
    
    def orchestrate_psychological_symphony(
        self,
        selected_drivers: List[Dict[str, Any]],
        avatar_data: Dict[str, Any],
        event_structure: str,
        product_offer: str,
        session_id: str = None
    ) -> Dict[str, Any]:
        """Orquestra sinfonia de tens√£o psicol√≥gica completa"""
        
        logger.info("üéØ INICIANDO ORQUESTRA√á√ÉO DE SINFONIA PSICOL√ìGICA")
        
        try:
            # Salva dados de entrada
            salvar_etapa("pre_pitch_advanced_input", {
                "selected_drivers": selected_drivers,
                "avatar_data": avatar_data,
                "event_structure": event_structure,
                "product_offer": product_offer
            }, categoria="pre_pitch")
            
            # Valida entrada
            if not selected_drivers:
                raise ValueError("Nenhum driver mental selecionado")
            
            if not avatar_data:
                raise ValueError("Dados do avatar ausentes")
            
            # Constr√≥i prompt de orquestra√ß√£o
            orchestration_prompt = self._build_orchestration_prompt(
                selected_drivers, avatar_data, event_structure, product_offer
            )
            
            # Executa orquestra√ß√£o com IA
            response = ai_manager.generate_analysis(orchestration_prompt, max_tokens=8192)
            
            if not response:
                raise Exception("MESTRE DO PR√â-PITCH FALHOU: IA n√£o respondeu")
            
            # Processa resposta de orquestra√ß√£o
            orchestration_analysis = self._process_orchestration_response(response)
            
            # Cria sequ√™ncia de instala√ß√£o psicol√≥gica
            psychological_sequence = self._create_psychological_installation_sequence(
                orchestration_analysis, selected_drivers, avatar_data
            )
            orchestration_analysis['sequencia_instalacao_psicologica'] = psychological_sequence
            
            # Gera roteiros de execu√ß√£o
            execution_scripts = self._generate_execution_scripts(orchestration_analysis, event_structure)
            orchestration_analysis['roteiros_execucao'] = execution_scripts
            
            # Cria sistema de monitoramento
            monitoring_system = self._create_monitoring_system(orchestration_analysis)
            orchestration_analysis['sistema_monitoramento'] = monitoring_system
            
            # Salva orquestra√ß√£o completa
            salvar_etapa("pre_pitch_orchestration_complete", orchestration_analysis, categoria="pre_pitch")
            
            logger.info("‚úÖ SINFONIA DE TENS√ÉO PSICOL√ìGICA ORQUESTRADA")
            return orchestration_analysis
            
        except Exception as e:
            logger.error(f"‚ùå FALHA CR√çTICA na orquestra√ß√£o: {e}")
            salvar_erro("pre_pitch_orchestration_error", e)
            return self._generate_orchestration_emergency()
    
    def _build_orchestration_prompt(
        self,
        selected_drivers: List[Dict[str, Any]],
        avatar_data: Dict[str, Any],
        event_structure: str,
        product_offer: str
    ) -> str:
        """Constr√≥i prompt de orquestra√ß√£o"""
        
        prompt = f"""
# VOC√ä √â O MESTRE DO PR√â-PITCH INVIS√çVEL

Miss√£o: Orquestrar SINFONIA DE TENS√ÉO PSICOL√ìGICA que prepara terreno mental para que o prospect IMPLORE pela oferta.

## DRIVERS MENTAIS SELECIONADOS:
{json.dumps(selected_drivers, indent=2, ensure_ascii=False)[:3000]}

## AVATAR ALVO:
{json.dumps(avatar_data, indent=2, ensure_ascii=False)[:3000]}

## ESTRUTURA DO EVENTO:
{event_structure}

## PRODUTO E OFERTA:
{product_offer}

## ESTRUTURA DO PR√â-PITCH INVIS√çVEL:

### FASE 1: ORQUESTRA√á√ÉO EMOCIONAL (70% do tempo)
- QUEBRA ‚Üí Destruir ilus√£o confort√°vel
- EXPOSI√á√ÉO ‚Üí Revelar ferida real
- INDIGNA√á√ÉO ‚Üí Criar revolta produtiva
- VISLUMBRE ‚Üí Mostrar o poss√≠vel
- TENS√ÉO ‚Üí Amplificar o gap
- NECESSIDADE ‚Üí Tornar mudan√ßa inevit√°vel

### FASE 2: JUSTIFICA√á√ÉO L√ìGICA (30% do tempo)
- N√∫meros irrefut√°veis
- C√°lculos de ROI conservadores
- Demonstra√ß√µes passo a passo
- Cases com m√©tricas espec√≠ficas

RETORNE JSON ESTRUTURADO ULTRA-COMPLETO:

```json
{{
  "orquestracao_emocional": {{
    "sequencia_psicologica": [
      {{
        "fase": "quebra",
        "objetivo": "Destruir a ilus√£o confort√°vel",
        "duracao": "3-5 minutos",
        "drivers_utilizados": ["Driver espec√≠fico"],
        "narrativa": "Script espec√≠fico da fase",
        "resultado_esperado": "Desconforto produtivo",
        "tecnicas": ["T√©cnica 1", "T√©cnica 2"],
        "frases_chave": ["Frase impactante 1", "Frase impactante 2"],
        "transicao": "Como conectar com pr√≥xima fase"
      }}
    ],
    "escalada_emocional": "Como aumentar intensidade progressivamente",
    "pontos_criticos": ["Momentos de maior impacto"],
    "gestao_energia": "Como gerenciar energia da audi√™ncia"
  }},
  
  "roteiro_completo": {{
    "abertura": {{
      "tempo": "3-5 minutos",
      "script": "Roteiro detalhado palavra por palavra da abertura",
      "driver_principal": "Driver mental utilizado",
      "objetivo_emocional": "Estado emocional desejado",
      "transicao": "Como conectar com pr√≥xima fase"
    }},
    "desenvolvimento": {{
      "tempo": "8-12 minutos",
      "script": "Roteiro detalhado do desenvolvimento",
      "escalada_emocional": "Como aumentar intensidade",
      "momentos_criticos": ["Momento cr√≠tico 1", "Momento cr√≠tico 2"],
      "drivers_sequenciais": ["Driver 1", "Driver 2"]
    }},
    "pre_climax": {{
      "tempo": "3-4 minutos",
      "script": "Roteiro do pr√©-cl√≠max",
      "ponto_virada": "Momento exato da virada",
      "tensao_maxima": "Como atingir tens√£o m√°xima",
      "preparacao_pitch": "Como preparar para oferta"
    }},
    "fechamento": {{
      "tempo": "2-3 minutos",
      "script": "Roteiro do fechamento",
      "ponte_oferta": "Transi√ß√£o perfeita para pitch",
      "estado_mental_ideal": "Como devem estar mentalmente",
      "comando_final": "Comando de a√ß√£o final"
    }}
  }},
  
  "variacoes_formato": {{
    "webinar": {{
      "duracao_total": "15-20 minutos",
      "adaptacoes": ["Usar chat para engajamento", "Pausas para perguntas"],
      "timing": "√öltimos 20 minutos antes da oferta",
      "recursos_tecnicos": ["Slides", "Chat", "Polls"]
    }},
    "evento_presencial": {{
      "duracao_total": "25-35 minutos",
      "adaptacoes": ["Intera√ß√£o direta", "Movimenta√ß√£o no palco"],
      "timing": "Distribu√≠do ao longo do evento",
      "recursos_fisicos": ["Microfone", "Projetor", "Espa√ßo"]
    }},
    "lives_aquecimento": {{
      "duracao_total": "5-8 minutos por live",
      "adaptacoes": ["Sementes em cada live", "Prepara√ß√£o subliminar"],
      "timing": "Distribu√≠do nas lives",
      "estrategia_acumulativa": "Como construir tens√£o ao longo das lives"
    }}
  }},
  
  "metricas_sucesso": {{
    "indicadores_durante": ["Sil√™ncio absoluto", "Coment√°rios emocionais"],
    "indicadores_apos": ["Ansiedade para oferta", "Perguntas sobre pre√ßo"],
    "sinais_resistencia": ["Questionamentos t√©cnicos", "Mudan√ßa de assunto"],
    "conversao_esperada": "Taxa de convers√£o esperada p√≥s-pr√©-pitch"
  }}
}}
```

CR√çTICO: Crie uma sequ√™ncia que fa√ßa o prospect IMPLORAR pela oferta antes mesmo dela ser apresentada.
"""
        
        return prompt
    
    def _process_orchestration_response(self, response: str) -> Dict[str, Any]:
        """Processa resposta de orquestra√ß√£o"""
        
        try:
            # Extrai JSON da resposta
            clean_text = response.strip()
            
            if "```json" in clean_text:
                start = clean_text.find("```json") + 7
                end = clean_text.rfind("```")
                clean_text = clean_text[start:end].strip()
            
            # Parseia JSON
            orchestration_data = json.loads(clean_text)
            
            # Adiciona metadados
            orchestration_data['metadata_orquestracao'] = {
                'generated_at': datetime.now().isoformat(),
                'agent': 'MESTRE DO PR√â-PITCH INVIS√çVEL',
                'sinfonia_psicologica': True,
                'tensao_orquestrada': True
            }
            
            return orchestration_data
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Erro ao parsear JSON de orquestra√ß√£o: {e}")
            return self._extract_orchestration_from_text(response)
    
    def _extract_orchestration_from_text(self, text: str) -> Dict[str, Any]:
        """Extrai orquestra√ß√£o do texto quando JSON falha"""
        
        return {
            "orquestracao_emocional": {
                "sequencia_psicologica": [
                    {
                        "fase": "quebra",
                        "objetivo": "Quebrar padr√£o e despertar consci√™ncia",
                        "duracao": "3-5 minutos",
                        "resultado_esperado": "Desconforto produtivo"
                    }
                ]
            },
            "raw_orchestration_text": text[:3000],
            "extraction_method": "text_analysis_orchestration"
        }
    
    def _create_psychological_installation_sequence(
        self,
        orchestration_data: Dict[str, Any],
        selected_drivers: List[Dict[str, Any]],
        avatar_data: Dict[str, Any]
    ) -> List[Dict[str, Any]]:
        """Cria sequ√™ncia de instala√ß√£o psicol√≥gica"""
        
        sequence = []
        
        # Mapeia drivers para fases
        for phase_data in orchestration_data.get('orquestracao_emocional', {}).get('sequencia_psicologica', []):
            phase_name = phase_data.get('fase', 'unknown')
            
            # Encontra drivers adequados para esta fase
            suitable_drivers = self._find_suitable_drivers_for_phase(phase_name, selected_drivers)
            
            sequence.append({
                'fase': phase_name,
                'objetivo': phase_data.get('objetivo', ''),
                'duracao': phase_data.get('duracao', ''),
                'drivers_instalados': suitable_drivers,
                'script_instalacao': self._generate_installation_script(phase_data, suitable_drivers),
                'pontos_contato': self._identify_contact_points(phase_data, avatar_data),
                'metricas_instalacao': self._define_installation_metrics(phase_name)
            })
        
        return sequence
    
    def _find_suitable_drivers_for_phase(self, phase_name: str, drivers: List[Dict[str, Any]]) -> List[str]:
        """Encontra drivers adequados para cada fase"""
        
        phase_driver_mapping = {
            'quebra': ['Diagn√≥stico Brutal', 'Ferida Exposta', 'Rel√≥gio Psicol√≥gico'],
            'exposicao': ['Custo Invis√≠vel', 'Ambiente Vampiro', 'Identidade Aprisionada'],
            'indignacao': ['Inveja Produtiva', 'Oportunidade Oculta', 'Padr√£o Oculto'],
            'vislumbre': ['Ambi√ß√£o Expandida', 'Trof√©u Secreto', 'Exce√ß√£o Poss√≠vel'],
            'tensao': ['Decis√£o Bin√°ria', 'Atalho √âtico', 'M√©todo vs Sorte'],
            'necessidade': ['Mentor Salvador', 'Coragem Necess√°ria', 'Mecanismo Revelado']
        }
        
        suitable_drivers = []
        available_driver_names = [d.get('nome', '') for d in drivers]
        
        for ideal_driver in phase_driver_mapping.get(phase_name, []):
            # Procura driver exato ou similar
            for driver_name in available_driver_names:
                if ideal_driver.lower() in driver_name.lower() or any(word in driver_name.lower() for word in ideal_driver.lower().split()):
                    suitable_drivers.append(driver_name)
                    break
        
        # Se n√£o encontrou drivers espec√≠ficos, usa os primeiros dispon√≠veis
        if not suitable_drivers and available_driver_names:
            suitable_drivers = available_driver_names[:2]
        
        return suitable_drivers[:3]  # M√°ximo 3 drivers por fase
    
    def _generate_installation_script(self, phase_data: Dict[str, Any], drivers: List[str]) -> str:
        """Gera script de instala√ß√£o para a fase"""
        
        phase_name = phase_data.get('fase', 'unknown')
        objetivo = phase_data.get('objetivo', '')
        
        scripts = {
            'quebra': f"Deixa eu te fazer uma pergunta que vai incomodar... {objetivo.lower()}. Usando drivers: {', '.join(drivers)}",
            'exposicao': f"Agora vou te mostrar algo que d√≥i ver... {objetivo.lower()}. Ativando: {', '.join(drivers)}",
            'indignacao': f"E o pior de tudo √© que isso n√£o precisa ser assim... {objetivo.lower()}. Intensificando com: {', '.join(drivers)}",
            'vislumbre': f"Mas calma, n√£o vim aqui s√≥ para abrir feridas... {objetivo.lower()}. Inspirando atrav√©s de: {', '.join(drivers)}",
            'tensao': f"Agora voc√™ v√™ a diferen√ßa entre onde est√° e onde poderia estar... {objetivo.lower()}. Amplificando tens√£o via: {', '.join(drivers)}",
            'necessidade': f"A pergunta n√£o √© SE voc√™ vai mudar, √© COMO... {objetivo.lower()}. Direcionando com: {', '.join(drivers)}"
        }
        
        return scripts.get(phase_name, f"Script para {phase_name}: {objetivo}")
    
    def _identify_contact_points(self, phase_data: Dict[str, Any], avatar_data: Dict[str, Any]) -> List[str]:
        """Identifica pontos de contato psicol√≥gico"""
        
        phase_name = phase_data.get('fase', 'unknown')
        
        # Extrai dores e desejos do avatar
        dores = avatar_data.get('dores_viscerais', [])
        desejos = avatar_data.get('desejos_secretos', [])
        
        contact_points = []
        
        if phase_name == 'quebra' and dores:
            contact_points.extend([f"Confrontar: {dor[:50]}..." for dor in dores[:2]])
        elif phase_name == 'vislumbre' and desejos:
            contact_points.extend([f"Inspirar: {desejo[:50]}..." for desejo in desejos[:2]])
        else:
            contact_points.append(f"Conectar emocionalmente na fase {phase_name}")
        
        return contact_points
    
    def _define_installation_metrics(self, phase_name: str) -> Dict[str, Any]:
        """Define m√©tricas de instala√ß√£o para cada fase"""
        
        metrics = {
            'quebra': {
                'sinais_sucesso': ['Sil√™ncio absoluto', 'Linguagem corporal tensa', 'Aten√ß√£o total'],
                'sinais_resistencia': ['Questionamentos imediatos', 'Mudan√ßa de assunto', 'Desconforto excessivo'],
                'ajustes_necessarios': 'Reduzir intensidade se resist√™ncia alta'
            },
            'vislumbre': {
                'sinais_sucesso': ['Relaxamento corporal', 'Sorrisos', 'Concord√¢ncia'],
                'sinais_resistencia': ['Ceticismo verbal', 'Questionamentos t√©cnicos'],
                'ajustes_necessarios': 'Aumentar provas sociais se ceticismo'
            }
        }
        
        return metrics.get(phase_name, {
            'sinais_sucesso': ['Engajamento positivo'],
            'sinais_resistencia': ['Desengajamento'],
            'ajustes_necessarios': 'Monitorar e ajustar conforme rea√ß√£o'
        })
    
    def _generate_execution_scripts(self, orchestration_data: Dict[str, Any], event_structure: str) -> Dict[str, Any]:
        """Gera roteiros de execu√ß√£o detalhados"""
        
        return {
            'script_webinar': self._adapt_for_webinar(orchestration_data),
            'script_presencial': self._adapt_for_live_event(orchestration_data),
            'script_lives': self._adapt_for_live_streams(orchestration_data),
            'script_cpl': self._adapt_for_cpl(orchestration_data),
            'timing_guidelines': {
                'preparacao': 'Como preparar o ambiente psicol√≥gico',
                'execucao': 'Como executar cada fase',
                'monitoramento': 'Como monitorar rea√ß√µes em tempo real',
                'ajustes': 'Como fazer ajustes durante execu√ß√£o'
            }
        }
    
    def _adapt_for_webinar(self, orchestration_data: Dict[str, Any]) -> str:
        """Adapta para formato webinar"""
        
        return """
ADAPTA√á√ÉO PARA WEBINAR:

1. Use o chat como term√¥metro emocional
2. Fa√ßa pausas estrat√©gicas para perguntas ret√≥ricas
3. Use slides visuais para amplificar impacto
4. Monitore engajamento atrav√©s de rea√ß√µes
5. Ajuste ritmo baseado no feedback do chat

SCRIPT ESPEC√çFICO:
[Roteiro adaptado para webinar baseado na orquestra√ß√£o]
"""
    
    def _adapt_for_live_event(self, orchestration_data: Dict[str, Any]) -> str:
        """Adapta para evento presencial"""
        
        return """
ADAPTA√á√ÉO PARA EVENTO PRESENCIAL:

1. Use movimenta√ß√£o no palco para criar din√¢mica
2. Fa√ßa contato visual direto para intensificar conex√£o
3. Use gestos corporais para amplificar mensagem
4. Monitore linguagem corporal da audi√™ncia
5. Ajuste volume e intensidade baseado na energia da sala

SCRIPT ESPEC√çFICO:
[Roteiro adaptado para evento presencial]
"""
    
    def _adapt_for_live_streams(self, orchestration_data: Dict[str, Any]) -> str:
        """Adapta para lives de aquecimento"""
        
        return """
ADAPTA√á√ÉO PARA LIVES DE AQUECIMENTO:

1. Plante sementes psicol√≥gicas em cada live
2. Construa tens√£o progressivamente ao longo das lives
3. Use callbacks entre lives para criar continuidade
4. Intensifique na live final antes da oferta
5. Crie FOMO atrav√©s de revela√ß√µes graduais

ESTRAT√âGIA MULTI-LIVE:
[Roteiro distribu√≠do em m√∫ltiplas lives]
"""
    
    def _adapt_for_cpl(self, orchestration_data: Dict[str, Any]) -> str:
        """Adapta para CPL (Conte√∫do de Pr√©-Lan√ßamento)"""
        
        return """
ADAPTA√á√ÉO PARA CPL:

1. Distribua a tens√£o ao longo de 3 aulas
2. Cada aula deve ter um cliffhanger psicol√≥gico
3. Aula 3 deve ter m√°xima intensidade
4. Use educa√ß√£o como ve√≠culo para instala√ß√£o psicol√≥gica
5. Prepare terreno mental para oferta final

ESTRUTURA 3 AULAS:
[Roteiro distribu√≠do em 3 aulas com crescimento de tens√£o]
"""
    
    def _create_monitoring_system(self, orchestration_data: Dict[str, Any]) -> Dict[str, Any]:
        """Cria sistema de monitoramento da instala√ß√£o"""
        
        return {
            'indicadores_tempo_real': {
                'engajamento_alto': ['Sil√™ncio absoluto', 'Aten√ß√£o total', 'Linguagem corporal aberta'],
                'engajamento_medio': ['Algumas distra√ß√µes', 'Aten√ß√£o intermitente'],
                'engajamento_baixo': ['Conversas paralelas', 'Celulares', 'Sa√≠das']
            },
            'pontos_ajuste': {
                'resistencia_alta': 'Reduzir intensidade, aumentar valida√ß√£o',
                'resistencia_media': 'Manter curso, adicionar prova social',
                'resistencia_baixa': 'Aumentar intensidade, acelerar sequ√™ncia'
            },
            'sinais_instalacao_bem_sucedida': [
                'Perguntas sobre quando abre inscri√ß√µes',
                'Coment√°rios emocionais no chat',
                'Ansiedade vis√≠vel para a oferta',
                'Redu√ß√£o de obje√ß√µes',
                'Aumento de interesse'
            ]
        }
    
    def _generate_orchestration_emergency(self) -> Dict[str, Any]:
        """Gera orquestra√ß√£o de emerg√™ncia"""
        
        return {
            "orquestracao_emocional": {
                "sequencia_psicologica": [
                    {
                        "fase": "quebra",
                        "objetivo": "Quebrar padr√£o e despertar consci√™ncia",
                        "duracao": "3-5 minutos",
                        "resultado_esperado": "Desconforto produtivo"
                    },
                    {
                        "fase": "vislumbre",
                        "objetivo": "Mostrar possibilidades",
                        "duracao": "5-7 minutos",
                        "resultado_esperado": "Desejo de mudan√ßa"
                    },
                    {
                        "fase": "necessidade",
                        "objetivo": "Criar necessidade de solu√ß√£o",
                        "duracao": "3-4 minutos",
                        "resultado_esperado": "Urg√™ncia de a√ß√£o"
                    }
                ]
            },
            "metadata_orquestracao": {
                "generated_at": datetime.now().isoformat(),
                "agent": "MESTRE PR√â-PITCH - MODO EMERG√äNCIA",
                "status": "emergency_orchestration"
            }
        }

# Inst√¢ncia global
pre_pitch_architect_advanced = PrePitchArchitectAdvanced()