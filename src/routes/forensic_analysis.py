#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Forensic Analysis Routes
Rotas para os novos m√≥dulos de an√°lise forense
"""

import os
import logging
import time
import json
from datetime import datetime
from flask import Blueprint, request, jsonify, render_template
from werkzeug.utils import secure_filename
from services.forensic_cpl_analyzer import forensic_cpl_analyzer
from services.visceral_leads_engineer import visceral_leads_engineer
from services.pre_pitch_architect_advanced import pre_pitch_architect_advanced
from services.attachment_service import attachment_service
from database import db_manager
from services.auto_save_manager import salvar_etapa, salvar_erro

logger = logging.getLogger(__name__)

# Cria blueprint
forensic_bp = Blueprint('forensic', __name__)

@forensic_bp.route('/forensic_interface')
def forensic_interface():
    """Interface principal dos m√≥dulos forenses"""
    return render_template('forensic_interface.html')

@forensic_bp.route('/analyze_cpl_forensic', methods=['POST'])
def analyze_cpl_forensic():
    """Endpoint para an√°lise forense de CPL"""
    
    try:
        logger.info("üî¨ Iniciando an√°lise forense de CPL")
        
        # Coleta dados da requisi√ß√£o
        data = request.get_json()
        if not data:
            return jsonify({
                'error': 'Dados n√£o fornecidos',
                'message': 'Envie os dados da an√°lise forense no corpo da requisi√ß√£o'
            }), 400
        
        # Valida√ß√£o b√°sica
        transcription = data.get('transcription', '').strip()
        if not transcription:
            return jsonify({
                'error': 'Transcri√ß√£o obrigat√≥ria',
                'message': 'A transcri√ß√£o do CPL √© obrigat√≥ria para an√°lise forense'
            }), 400
        
        if len(transcription) < 500:
            return jsonify({
                'error': 'Transcri√ß√£o muito curta',
                'message': 'A transcri√ß√£o deve ter pelo menos 500 caracteres para an√°lise forense'
            }), 400
        
        # Adiciona session_id se n√£o fornecido
        session_id = data.get('session_id', f"cpl_forensic_{int(time.time())}")
        
        # Contexto da an√°lise
        context_data = {
            'contexto_estrategico': data.get('contexto_estrategico', ''),
            'objetivo_cpl': data.get('objetivo_cpl', ''),
            'sequencia': data.get('sequencia', ''),
            'formato': data.get('formato', ''),
            'temperatura_audiencia': data.get('temperatura_audiencia', ''),
            'tamanho_audiencia': data.get('tamanho_audiencia', ''),
            'origem_audiencia': data.get('origem_audiencia', ''),
            'nivel_consciencia': data.get('nivel_consciencia', ''),
            'produto_preco': data.get('produto_preco', ''),
            'novidade_produto': data.get('novidade_produto', '')
        }
        
        # Executa an√°lise forense
        forensic_result = forensic_cpl_analyzer.analyze_cpl_forensically(
            transcription, context_data, session_id
        )
        
        # Salva no banco de dados
        try:
            db_record = db_manager.create_analysis({
                'segmento': 'An√°lise Forense CPL',
                'produto': context_data.get('produto_preco', 'CPL'),
                'status': 'completed',
                'session_id': session_id,
                'analysis_type': 'forensic_cpl',
                **forensic_result
            })
            
            if db_record:
                forensic_result['database_id'] = db_record.get('id')
                logger.info(f"‚úÖ An√°lise forense salva: ID {db_record.get('id')}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar an√°lise forense: {e}")
            forensic_result['database_warning'] = f"Falha ao salvar: {str(e)}"
        
        # Adiciona metadados finais
        forensic_result['metadata_final'] = {
            'session_id': session_id,
            'analysis_type': 'forensic_cpl_analysis',
            'transcription_length': len(transcription),
            'context_provided': bool(any(context_data.values())),
            'generated_at': datetime.now().isoformat(),
            'agent': 'ARQUE√ìLOGO MESTRE DA PERSUAS√ÉO'
        }
        
        logger.info("‚úÖ An√°lise forense de CPL conclu√≠da")
        return jsonify(forensic_result)
        
    except Exception as e:
        logger.error(f"‚ùå Erro na an√°lise forense de CPL: {str(e)}")
        return jsonify({
            'error': 'Erro na an√°lise forense',
            'message': str(e),
            'timestamp': datetime.now().isoformat(),
            'recommendation': 'Verifique a transcri√ß√£o e tente novamente'
        }), 500

@forensic_bp.route('/reverse_engineer_leads', methods=['POST'])
def reverse_engineer_leads():
    """Endpoint para engenharia reversa de leads"""
    
    try:
        logger.info("üß† Iniciando engenharia reversa de leads")
        
        # Coleta dados da requisi√ß√£o
        data = request.get_json()
        if not data:
            return jsonify({
                'error': 'Dados n√£o fornecidos',
                'message': 'Envie os dados da engenharia reversa no corpo da requisi√ß√£o'
            }), 400
        
        # Valida√ß√£o b√°sica
        leads_data = data.get('leads_data', '').strip()
        if not leads_data:
            return jsonify({
                'error': 'Dados de leads obrigat√≥rios',
                'message': 'Os dados dos leads s√£o obrigat√≥rios para engenharia reversa'
            }), 400
        
        if len(leads_data) < 200:
            return jsonify({
                'error': 'Dados de leads insuficientes',
                'message': 'Os dados devem ter pelo menos 200 caracteres para an√°lise'
            }), 400
        
        # Adiciona session_id se n√£o fornecido
        session_id = data.get('session_id', f"leads_visceral_{int(time.time())}")
        
        # Contexto da an√°lise
        context_data = {
            'produto_servico': data.get('produto_servico', ''),
            'principais_perguntas': data.get('principais_perguntas', ''),
            'numero_respostas': data.get('numero_respostas', 0),
            'informacoes_demograficas': data.get('informacoes_demograficas', '')
        }
        
        # Executa engenharia reversa
        visceral_result = visceral_leads_engineer.reverse_engineer_leads(
            leads_data, context_data, session_id
        )
        
        # Salva no banco de dados
        try:
            db_record = db_manager.create_analysis({
                'segmento': 'Engenharia Reversa Leads',
                'produto': context_data.get('produto_servico', 'Leads'),
                'status': 'completed',
                'session_id': session_id,
                'analysis_type': 'visceral_leads',
                **visceral_result
            })
            
            if db_record:
                visceral_result['database_id'] = db_record.get('id')
                logger.info(f"‚úÖ Engenharia reversa salva: ID {db_record.get('id')}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar engenharia reversa: {e}")
            visceral_result['database_warning'] = f"Falha ao salvar: {str(e)}"
        
        # Adiciona metadados finais
        visceral_result['metadata_final'] = {
            'session_id': session_id,
            'analysis_type': 'visceral_leads_engineering',
            'leads_data_length': len(leads_data),
            'context_provided': bool(any(context_data.values())),
            'generated_at': datetime.now().isoformat(),
            'agent': 'MESTRE DA PERSUAS√ÉO VISCERAL'
        }
        
        logger.info("‚úÖ Engenharia reversa de leads conclu√≠da")
        return jsonify(visceral_result)
        
    except Exception as e:
        logger.error(f"‚ùå Erro na engenharia reversa: {str(e)}")
        return jsonify({
            'error': 'Erro na engenharia reversa',
            'message': str(e),
            'timestamp': datetime.now().isoformat(),
            'recommendation': 'Verifique os dados dos leads e tente novamente'
        }), 500

@forensic_bp.route('/orchestrate_pre_pitch', methods=['POST'])
def orchestrate_pre_pitch():
    """Endpoint para orquestra√ß√£o de pr√©-pitch"""
    
    try:
        logger.info("üéØ Iniciando orquestra√ß√£o de pr√©-pitch")
        
        # Coleta dados da requisi√ß√£o
        data = request.get_json()
        if not data:
            return jsonify({
                'error': 'Dados n√£o fornecidos',
                'message': 'Envie os dados da orquestra√ß√£o no corpo da requisi√ß√£o'
            }), 400
        
        # Valida√ß√£o b√°sica
        selected_drivers = data.get('selected_drivers', [])
        if not selected_drivers:
            return jsonify({
                'error': 'Drivers mentais obrigat√≥rios',
                'message': 'Selecione pelo menos um driver mental para orquestra√ß√£o'
            }), 400
        
        avatar_data = data.get('avatar_data', {})
        if not avatar_data:
            return jsonify({
                'error': 'Avatar obrigat√≥rio',
                'message': 'Dados do avatar s√£o obrigat√≥rios para orquestra√ß√£o'
            }), 400
        
        event_structure = data.get('event_structure', '').strip()
        product_offer = data.get('product_offer', '').strip()
        
        if not event_structure:
            return jsonify({
                'error': 'Estrutura do evento obrigat√≥ria',
                'message': 'Descreva a estrutura do evento/lan√ßamento'
            }), 400
        
        if not product_offer:
            return jsonify({
                'error': 'Produto e oferta obrigat√≥rios',
                'message': 'Detalhe o produto e a oferta'
            }), 400
        
        # Adiciona session_id se n√£o fornecido
        session_id = data.get('session_id', f"pre_pitch_{int(time.time())}")
        
        # Executa orquestra√ß√£o
        orchestration_result = pre_pitch_architect_advanced.orchestrate_psychological_symphony(
            selected_drivers, avatar_data, event_structure, product_offer, session_id
        )
        
        # Salva no banco de dados
        try:
            db_record = db_manager.create_analysis({
                'segmento': 'Orquestra√ß√£o Pr√©-Pitch',
                'produto': 'Pr√©-Pitch Invis√≠vel',
                'status': 'completed',
                'session_id': session_id,
                'analysis_type': 'pre_pitch_orchestration',
                **orchestration_result
            })
            
            if db_record:
                orchestration_result['database_id'] = db_record.get('id')
                logger.info(f"‚úÖ Orquestra√ß√£o salva: ID {db_record.get('id')}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar orquestra√ß√£o: {e}")
            orchestration_result['database_warning'] = f"Falha ao salvar: {str(e)}"
        
        # Adiciona metadados finais
        orchestration_result['metadata_final'] = {
            'session_id': session_id,
            'analysis_type': 'pre_pitch_orchestration',
            'drivers_count': len(selected_drivers),
            'event_structure_length': len(event_structure),
            'product_offer_length': len(product_offer),
            'generated_at': datetime.now().isoformat(),
            'agent': 'MESTRE DO PR√â-PITCH INVIS√çVEL'
        }
        
        logger.info("‚úÖ Orquestra√ß√£o de pr√©-pitch conclu√≠da")
        return jsonify(orchestration_result)
        
    except Exception as e:
        logger.error(f"‚ùå Erro na orquestra√ß√£o: {str(e)}")
        return jsonify({
            'error': 'Erro na orquestra√ß√£o',
            'message': str(e),
            'timestamp': datetime.now().isoformat(),
            'recommendation': 'Verifique os dados fornecidos e tente novamente'
        }), 500

@forensic_bp.route('/upload_cpl_content', methods=['POST'])
def upload_cpl_content():
    """Upload de conte√∫do de CPL (v√≠deo/√°udio)"""
    
    try:
        if 'file' not in request.files:
            return jsonify({
                'success': False,
                'error': 'Nenhum arquivo enviado'
            }), 400
        
        file = request.files['file']
        session_id = request.form.get('session_id', f"cpl_upload_{int(time.time())}")
        
        if file.filename == '':
            return jsonify({
                'success': False,
                'error': 'Nome de arquivo vazio'
            }), 400
        
        # Verifica tipo de arquivo
        allowed_extensions = {'.mp4', '.mp3', '.wav', '.m4a', '.avi', '.mov', '.txt', '.pdf'}
        file_ext = os.path.splitext(file.filename)[1].lower()
        
        if file_ext not in allowed_extensions:
            return jsonify({
                'success': False,
                'error': f'Tipo de arquivo n√£o suportado: {file_ext}'
            }), 400
        
        # Processa arquivo
        result = attachment_service.process_attachment(file, session_id)
        
        if result['success']:
            # Adiciona informa√ß√µes espec√≠ficas para CPL
            result['cpl_info'] = {
                'file_type': 'cpl_content',
                'requires_transcription': file_ext in {'.mp4', '.mp3', '.wav', '.m4a', '.avi', '.mov'},
                'ready_for_analysis': file_ext in {'.txt', '.pdf'}
            }
        
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"‚ùå Erro no upload de CPL: {str(e)}")
        return jsonify({
            'success': False,
            'error': 'Erro interno no upload',
            'message': str(e)
        }), 500

@forensic_bp.route('/upload_leads_data', methods=['POST'])
def upload_leads_data():
    """Upload de dados de leads"""
    
    try:
        if 'file' not in request.files:
            return jsonify({
                'success': False,
                'error': 'Nenhum arquivo enviado'
            }), 400
        
        file = request.files['file']
        session_id = request.form.get('session_id', f"leads_upload_{int(time.time())}")
        
        if file.filename == '':
            return jsonify({
                'success': False,
                'error': 'Nome de arquivo vazio'
            }), 400
        
        # Verifica tipo de arquivo
        allowed_extensions = {'.csv', '.xlsx', '.xls', '.txt', '.json'}
        file_ext = os.path.splitext(file.filename)[1].lower()
        
        if file_ext not in allowed_extensions:
            return jsonify({
                'success': False,
                'error': f'Tipo de arquivo n√£o suportado para leads: {file_ext}'
            }), 400
        
        # Processa arquivo
        result = attachment_service.process_attachment(file, session_id)
        
        if result['success']:
            # Adiciona informa√ß√µes espec√≠ficas para leads
            result['leads_info'] = {
                'file_type': 'leads_data',
                'data_format': file_ext,
                'ready_for_analysis': True
            }
        
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"‚ùå Erro no upload de leads: {str(e)}")
        return jsonify({
            'success': False,
            'error': 'Erro interno no upload',
            'message': str(e)
        }), 500

@forensic_bp.route('/get_available_drivers', methods=['GET'])
def get_available_drivers():
    """Obt√©m drivers mentais dispon√≠veis"""
    
    try:
        # Lista drivers mentais padr√£o dispon√≠veis
        available_drivers = [
            {
                'id': 'ferida_exposta',
                'nome': 'Driver da Ferida Exposta',
                'categoria': 'Confronta√ß√£o',
                'intensidade': 'Alta',
                'descricao': 'Exp√µe feridas emocionais para criar urg√™ncia'
            },
            {
                'id': 'trofeu_secreto',
                'nome': 'Driver do Trof√©u Secreto',
                'categoria': 'Aspira√ß√£o',
                'intensidade': 'M√©dia',
                'descricao': 'Ativa desejos secretos de reconhecimento'
            },
            {
                'id': 'inveja_produtiva',
                'nome': 'Driver da Inveja Produtiva',
                'categoria': 'Compara√ß√£o',
                'intensidade': 'Alta',
                'descricao': 'Usa compara√ß√£o social para motivar a√ß√£o'
            },
            {
                'id': 'relogio_psicologico',
                'nome': 'Driver do Rel√≥gio Psicol√≥gico',
                'categoria': 'Urg√™ncia',
                'intensidade': 'M√°xima',
                'descricao': 'Cria press√£o temporal psicol√≥gica'
            },
            {
                'id': 'identidade_aprisionada',
                'nome': 'Driver da Identidade Aprisionada',
                'categoria': 'Transforma√ß√£o',
                'intensidade': 'Alta',
                'descricao': 'Questiona identidade atual limitante'
            },
            {
                'id': 'custo_invisivel',
                'nome': 'Driver do Custo Invis√≠vel',
                'categoria': 'Conscientiza√ß√£o',
                'intensidade': 'M√©dia',
                'descricao': 'Revela custos ocultos da ina√ß√£o'
            },
            {
                'id': 'ambicao_expandida',
                'nome': 'Driver da Ambi√ß√£o Expandida',
                'categoria': 'Inspira√ß√£o',
                'intensidade': 'Alta',
                'descricao': 'Expande vis√£o de possibilidades'
            },
            {
                'id': 'diagnostico_brutal',
                'nome': 'Driver do Diagn√≥stico Brutal',
                'categoria': 'Realidade',
                'intensidade': 'M√°xima',
                'descricao': 'Diagn√≥stico direto e confrontador'
            },
            {
                'id': 'ambiente_vampiro',
                'nome': 'Driver do Ambiente Vampiro',
                'categoria': 'Conscientiza√ß√£o',
                'intensidade': 'Alta',
                'descricao': 'Identifica influ√™ncias t√≥xicas'
            },
            {
                'id': 'mentor_salvador',
                'nome': 'Driver do Mentor Salvador',
                'categoria': 'Autoridade',
                'intensidade': 'M√©dia',
                'descricao': 'Posiciona como mentor necess√°rio'
            },
            {
                'id': 'coragem_necessaria',
                'nome': 'Driver da Coragem Necess√°ria',
                'categoria': 'Empoderamento',
                'intensidade': 'Alta',
                'descricao': 'Instala coragem para mudan√ßa'
            },
            {
                'id': 'mecanismo_revelado',
                'nome': 'Driver do Mecanismo Revelado',
                'categoria': 'Educa√ß√£o',
                'intensidade': 'M√©dia',
                'descricao': 'Revela como funciona o sistema'
            },
            {
                'id': 'prova_matematica',
                'nome': 'Driver da Prova Matem√°tica',
                'categoria': 'L√≥gica',
                'intensidade': 'M√©dia',
                'descricao': 'Usa dados e n√∫meros para convencer'
            },
            {
                'id': 'padrao_oculto',
                'nome': 'Driver do Padr√£o Oculto',
                'categoria': 'Revela√ß√£o',
                'intensidade': 'Alta',
                'descricao': 'Revela padr√µes n√£o percebidos'
            },
            {
                'id': 'excecao_possivel',
                'nome': 'Driver da Exce√ß√£o Poss√≠vel',
                'categoria': 'Esperan√ßa',
                'intensidade': 'M√©dia',
                'descricao': 'Mostra que exce√ß√µes s√£o poss√≠veis'
            },
            {
                'id': 'atalho_etico',
                'nome': 'Driver do Atalho √âtico',
                'categoria': 'Efici√™ncia',
                'intensidade': 'M√©dia',
                'descricao': 'Apresenta atalho moral e eficaz'
            },
            {
                'id': 'decisao_binaria',
                'nome': 'Driver da Decis√£o Bin√°ria',
                'categoria': 'Decis√£o',
                'intensidade': 'M√°xima',
                'descricao': 'For√ßa escolha entre duas op√ß√µes'
            },
            {
                'id': 'oportunidade_oculta',
                'nome': 'Driver da Oportunidade Oculta',
                'categoria': 'Revela√ß√£o',
                'intensidade': 'Alta',
                'descricao': 'Revela oportunidade n√£o percebida'
            },
            {
                'id': 'metodo_vs_sorte',
                'nome': 'Driver do M√©todo vs Sorte',
                'categoria': 'Diferencia√ß√£o',
                'intensidade': 'Alta',
                'descricao': 'Contrasta m√©todo com tentativa'
            }
        ]
        
        return jsonify({
            'success': True,
            'drivers': available_drivers,
            'total_drivers': len(available_drivers),
            'categories': list(set(d['categoria'] for d in available_drivers))
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter drivers: {str(e)}")
        return jsonify({
            'error': 'Erro ao obter drivers',
            'message': str(e)
        }), 500

@forensic_bp.route('/get_available_avatars', methods=['GET'])
def get_available_avatars():
    """Obt√©m avatares dispon√≠veis"""
    
    try:
        # Lista an√°lises que cont√™m avatares
        analyses = db_manager.list_analyses(limit=50)
        
        available_avatars = []
        
        for analysis in analyses:
            if analysis.get('avatar_data') or 'avatar' in str(analysis).lower():
                available_avatars.append({
                    'id': analysis['id'],
                    'nome': f"Avatar - {analysis.get('segmento', 'An√°lise')}",
                    'segmento': analysis.get('segmento', 'N/A'),
                    'produto': analysis.get('produto', 'N/A'),
                    'created_at': analysis.get('created_at', ''),
                    'has_avatar_data': bool(analysis.get('avatar_data'))
                })
        
        # Adiciona avatares padr√£o se n√£o houver an√°lises
        if not available_avatars:
            available_avatars = [
                {
                    'id': 'default_entrepreneur',
                    'nome': 'Empreendedor Digital Padr√£o',
                    'segmento': 'Produtos Digitais',
                    'produto': 'Infoprodutos',
                    'created_at': datetime.now().isoformat(),
                    'has_avatar_data': True,
                    'is_default': True
                },
                {
                    'id': 'default_consultant',
                    'nome': 'Consultor Profissional Padr√£o',
                    'segmento': 'Consultoria',
                    'produto': 'Servi√ßos de Consultoria',
                    'created_at': datetime.now().isoformat(),
                    'has_avatar_data': True,
                    'is_default': True
                }
            ]
        
        return jsonify({
            'success': True,
            'avatars': available_avatars,
            'total_avatars': len(available_avatars)
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter avatares: {str(e)}")
        return jsonify({
            'error': 'Erro ao obter avatares',
            'message': str(e)
        }), 500

@forensic_bp.route('/get_avatar_data/<avatar_id>', methods=['GET'])
def get_avatar_data(avatar_id):
    """Obt√©m dados detalhados de um avatar"""
    
    try:
        if avatar_id.startswith('default_'):
            # Avatar padr√£o
            default_avatars = {
                'default_entrepreneur': {
                    'nome_ficticio': 'Empreendedor Digital Brasileiro',
                    'dores_viscerais': [
                        'Trabalhar 12+ horas sem crescimento proporcional',
                        'Ver concorrentes menores crescendo mais r√°pido',
                        'Sentir-se preso no operacional',
                        'N√£o conseguir se desconectar do trabalho',
                        'Viver com medo de que tudo desmorone'
                    ],
                    'desejos_secretos': [
                        'Ser reconhecido como autoridade no mercado',
                        'Ter um neg√≥cio que funcione sem presen√ßa',
                        'Ganhar dinheiro de forma passiva',
                        'Ter liberdade total de hor√°rios',
                        'Deixar um legado significativo'
                    ]
                },
                'default_consultant': {
                    'nome_ficticio': 'Consultor Profissional Brasileiro',
                    'dores_viscerais': [
                        'Trocar tempo por dinheiro constantemente',
                        'N√£o conseguir escalar sem trabalhar mais',
                        'Competir apenas por pre√ßo',
                        'Depender de indica√ß√µes para crescer',
                        'N√£o ter previsibilidade de receita'
                    ],
                    'desejos_secretos': [
                        'Ser procurado como especialista premium',
                        'Ter metodologia pr√≥pria reconhecida',
                        'Cobrar valores premium sem resist√™ncia',
                        'Ter agenda lotada com clientes ideais',
                        'Ser refer√™ncia no mercado'
                    ]
                }
            }
            
            avatar_data = default_avatars.get(avatar_id, {})
        else:
            # Avatar de an√°lise existente
            analysis = db_manager.get_analysis(avatar_id)
            if analysis:
                avatar_data = analysis.get('avatar_data') or analysis.get('comprehensive_analysis', {}).get('avatar_ultra_detalhado', {})
            else:
                return jsonify({
                    'error': 'Avatar n√£o encontrado'
                }), 404
        
        return jsonify({
            'success': True,
            'avatar_data': avatar_data,
            'avatar_id': avatar_id
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter dados do avatar: {str(e)}")
        return jsonify({
            'error': 'Erro ao obter dados do avatar',
            'message': str(e)
        }), 500

@forensic_bp.route('/generate_forensic_pdf', methods=['POST'])
def generate_forensic_pdf():
    """Gera PDF da an√°lise forense"""
    
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                'error': 'Dados n√£o fornecidos'
            }), 400
        
        analysis_type = data.get('analysis_type', 'forensic')
        analysis_data = data.get('analysis_data', {})
        
        # Gera PDF usando o gerador existente
        from routes.pdf_generator import pdf_generator
        
        pdf_buffer = pdf_generator.generate_analysis_report(analysis_data)
        
        # Salva arquivo tempor√°rio
        import tempfile
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
            tmp_file.write(pdf_buffer.getvalue())
            tmp_file_path = tmp_file.name
        
        # Retorna arquivo
        from flask import send_file
        return send_file(
            tmp_file_path,
            as_attachment=True,
            download_name=f"analise_forense_{analysis_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
            mimetype='application/pdf'
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar PDF forense: {str(e)}")
        return jsonify({
            'error': 'Erro ao gerar PDF',
            'message': str(e)
        }), 500

@forensic_bp.route('/test_forensic_system', methods=['POST'])
def test_forensic_system():
    """Testa sistema forense com dados de exemplo"""
    
    try:
        test_type = request.json.get('test_type', 'cpl') if request.json else 'cpl'
        
        if test_type == 'cpl':
            # Teste de an√°lise forense de CPL
            test_transcription = """
            Ol√° pessoal, bem-vindos ao nosso treinamento sobre marketing digital. 
            Eu sou Jo√£o Silva, e nos √∫ltimos 10 anos ajudei mais de 500 empresas a triplicarem suas vendas online.
            Hoje vou compartilhar com voc√™s o m√©todo exato que uso para isso.
            Mas antes, deixa eu te fazer uma pergunta: voc√™ j√° se sentiu frustrado vendo seus concorrentes crescerem mais r√°pido que voc√™?
            Se a resposta √© sim, voc√™ n√£o est√° sozinho. 90% dos empreendedores passam por isso.
            O problema n√£o √© falta de esfor√ßo, √© falta de m√©todo. E √© exatamente isso que vou te ensinar hoje.
            """
            
            context_data = {
                'contexto_estrategico': 'Primeiro contato',
                'objetivo_cpl': 'Educar',
                'formato': 'Gravado',
                'temperatura_audiencia': 'Fria'
            }
            
            result = forensic_cpl_analyzer.analyze_cpl_forensically(
                test_transcription, context_data, f"test_cpl_{int(time.time())}"
            )
            
        elif test_type == 'leads':
            # Teste de engenharia reversa de leads
            test_leads_data = """
            Pergunta 1: Qual seu maior desafio no neg√≥cio?
            Resposta 1: N√£o consigo escalar sem trabalhar mais horas
            Resposta 2: Tenho dificuldade para precificar meus servi√ßos
            Resposta 3: N√£o sei como me posicionar no mercado
            
            Pergunta 2: O que mais te frustra atualmente?
            Resposta 1: Ver concorrentes menores crescendo mais r√°pido
            Resposta 2: Trabalhar muito e ganhar pouco
            Resposta 3: N√£o ter tempo para fam√≠lia
            """
            
            context_data = {
                'produto_servico': 'Consultoria em Marketing',
                'numero_respostas': 3,
                'principais_perguntas': 'Desafios e frustra√ß√µes no neg√≥cio'
            }
            
            result = visceral_leads_engineer.reverse_engineer_leads(
                test_leads_data, context_data, f"test_leads_{int(time.time())}"
            )
            
        else:
            return jsonify({
                'error': 'Tipo de teste inv√°lido',
                'valid_types': ['cpl', 'leads']
            }), 400
        
        return jsonify({
            'success': True,
            'test_type': test_type,
            'result': result,
            'message': f'Teste de {test_type} executado com sucesso'
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erro no teste forense: {str(e)}")
        return jsonify({
            'error': 'Erro no teste do sistema forense',
            'message': str(e)
        }), 500